apply plugin: 'com.android.application'

def googleMapsApiDebugKey = hasProperty('DEBUG_MAPS_API_KEY') ? DEBUG_MAPS_API_KEY: ''
def googleMapsApiReleaseKey = hasProperty('RELEASE_MAPS_API_KEY') ? DEBUG_MAPS_API_KEY: ''

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "mil.nga.giat.asam"
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiReleaseKey
        }
        debug {
            minifyEnabled false
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiDebugKey
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    api 'com.android.support:appcompat-v7:28.0.0'
    api "com.android.support:design:28.0.0"
    api 'com.android.support:cardview-v7:28.0.0'
    api 'com.android.support:recyclerview-v7:28.0.0'
    api 'com.google.android.gms:play-services-maps:10.2.6'
    api 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
    api 'com.vividsolutions:jts:1.13'
    api 'org.apache.commons:commons-lang3:3.4'
    implementation("com.squareup.okhttp3:okhttp:4.1.0")
    implementation files('libs/poffen_cluster_1.1.jar')
}

configure extensions.android, {
    if (project.hasProperty('RELEASE_STORE_FILE') && file(project.getProperty('RELEASE_STORE_FILE')).exists()) {
        println 'found release key store for signing'
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
    else {
        println 'no release key store configured - will skip signing'
    }

    if (project.hasProperty('SKIP_DEBUG_SIGNING')) {
        buildTypes {
            debug {
                signingConfig null
            }
        }
    }
    else if (project.hasProperty('DEBUG_STORE_FILE') && file(project.getProperty('DEBUG_STORE_FILE')).exists()) {
        signingConfigs {
            debug {
                storeFile file(DEBUG_STORE_FILE)
                storePassword DEBUG_STORE_PASSWORD
                keyAlias DEBUG_KEY_ALIAS
                keyPassword DEBUG_KEY_PASSWORD
            }
        }
    }
}

